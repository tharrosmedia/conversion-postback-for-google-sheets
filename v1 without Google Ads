/*
This script checks a specific column in a Google Sheet for a value ("facebook" or "google") and posts to the respective API. It’s designed for businesses that advertise without a dedicated CRM, enabling them to automate data postbacks to advertising platforms for optimization purposes.

How It Works:
1. Advertise to a landing page or use an in-platform lead form.
2. Use Zapier to enter form submission data into Sheet1.
3. Transfer data for those who schedule/book an appointment to Sheet2.
4. The script reads a specified column in Sheet2 and posts the lead info to the relevant API based on the lead source.
5. Utilize the posted data to optimize advertising on the platform.

Code Explanation:
- onEdit(e): A trigger function that automatically runs upon any cell edit, and passes the event object 'e' to handleDirectAPIEvent.
- handleDirectAPIEvent(e): Validates the edited cell and invokes respective API call functions.
- sendFacebookEvent(): Sends a predefined payload to the Facebook API.
- sendGoogleEvent(): Sends a predefined payload to the Google API.
- hashValue(value): A function takes a string as an input and returns a hashed string using the SHA-256 hashing algorithm.
- convertToTimestamp(columnLetter): This lets you use column letters instead of converting them to numbers yourself. 
- columnToNumber(dateStr): Converts the date string structured "YYYY-MM-DD HH:mm:ss" to a UNIX timestamp to send to APIs.

Prerequisites:
- Basic understanding of Google Apps Script and JavaScript is recommended.
- Ensure you have developer accounts/API access to platforms (e.g., Facebook for Developers, Google Cloud) to obtain necessary API credentials.
- Ensure Zapier is set up correctly to populate Google Sheets with the desired data.

Parameter Customization:
- Each API has specific payload parameters; reference the respective API documentation for accurate parameter names and expected values.
  E.g., For Facebook API: [https://developers.facebook.com/docs/marketing-apis/overview]
       For Google Analytics Measurement Protocol: [https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters]

API Response Handling:
- Responses from API calls can provide vital information about the success or failure of the request. Consider logging API responses for debugging or data validation purposes. 
  Example: var response = UrlFetchApp.fetch(fbApiUrl, params); Logger.log('API Response: ' + response);

Troubleshooting:
- If data is not posting to APIs as expected, ensure the correct cells are being edited and check API payload formatting. 
- For unauthorized errors, verify your API credentials and endpoint URLs.
- If encountering rate limits, inspect your script’s execution frequency and implement delays if necessary.

Additional Example:
- Example Payload for Facebook API:
  
  var payload = {
    // Your payload data here...
    // Example for Facebook API:
    // data: [{
    //   event_name: 'Lead',
    //   event_time: Math.floor(Date.now() / 1000), // Unix timestamp
    //   user_data: {
    //     em: '7e0cc58dfa07f4b9ac6c2f19d48fc767', // Hashed email address
    //   },
    // }],
    // access_token: 'YOUR_ACCESS_TOKEN',
  };

Note: Always validate and format payload data according to API expectations.

Security Consideration: 
- Always ensure sensitive data like API keys, tokens, or any credentials are securely stored. Consider using Google Cloud’s Key Management for storing and accessing such sensitive data in your script.
- Double-check the API for its requirements. Most need you to send hashed data. Example of the hashing function:

function hashValue_exampleUsage() {
  var email = "user@example.com";
  var phoneNumber = "123-456-7890";
  var name = "John Doe";
  
  var hashedEmail = hashValue(email);
  var hashedPhone = hashValue(phoneNumber);
  var hashedName = hashValue(name);
}


Customization:
- To add more platforms/API endpoints, you need to define a new function similar to sendFacebookEvent() or sendGoogleEvent() and adjust your payload as per the API documentation of the platform.
- If your API requires headers for authentication or other purposes, adjust the 'params' object accordingly.

Debugging:
- Logged errors will provide information about the failure point or issue in your API calls. Ensure to check API documentation for error message specifics to troubleshoot effectively.
- If you encounter issues with API rate limits, consider introducing a delay between requests using Utilities.sleep(time_in_milliseconds).

Working with APIs:
- Be mindful of any API usage limits of the platforms you're interacting with and ensure your script complies with these. Introduce error handling for rate limit errors to manage them gracefully.

Remember to Replace:
- YOUR_API_VERSION, YOUR_PIXEL_ID, YOUR_TRACKING_ID, and YOUR_ACCESS_TOKEN. These are placeholders for actual data required to interact with APIs.

Usage:
- Ensure the script is bound to the Google Sheet you're working with. Navigate to Extensions > Apps Script and paste this code into the Code.gs file, then save.

Error Handling Note:
- In case of an API call failure, check the Logs for details on the issue. Navigate to Executions to see event triggers. View > Logs in the Apps Script editor.

*/

function onEdit(e) {
  handleDirectAPIEvent(e);
}

function handleDirectAPIEvent(e) {
  var editedCell = e.range;
  var sourceSheet = editedCell.getSheet();
  
  // Converts the column letter into a number.
  function columnToNumber(columnLetter) {
  var columnNumber = 0, length = columnLetter.length;
  for (var i = 0; i < length; i++) {
    columnNumber = (columnNumber * 26) + (columnLetter.charCodeAt(i) - 'A'.charCodeAt(0) + 1);
  }
  return columnNumber;
}

// Convert the time structured "YYYY-MM-DD HH:mm:ss" into a UNIX timestamp.
function convertToTimestamp(dateStr) {
  var date;
  if (typeof dateStr === 'object' && dateStr instanceof Date) {
    date = dateStr;
  } else if (typeof dateStr === 'string') {
    var parts = dateStr.split(' ');
    var dateParts = parts[0].split('-');
    var timeParts = parts[1].split(':');
    date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2], timeParts[0], timeParts[1], timeParts[2]);
  } else {
    throw new Error('Invalid date input format: ' + dateStr);
  }
  return Math.floor(date.getTime() / 1000); // Convert milliseconds to seconds
}

// Converts a value into a SHA 256 hashed value.
function hashValue(value) {
  var rawValue = value.toString(); 
  var hashedValue = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, rawValue, Utilities.Charset.UTF_8);
  return hashedValue.map(function(byte) {
    return ('0' + (byte & 0xFF).toString(16)).slice(-2);
  }).join('');
}

  // The column to check for your API triggers
  if (editedCell.getColumn() === columnToNumber("I")) {
    var cellValue = editedCell.getValue().toString().toLowerCase().trim();
    
    // Get multiple data points at once from the same row
    var dataRange = sourceSheet.getRange(editedCell.getRow(), 1, 1, 12); // Assume you are interested in columns A-L
    var [a, firstName, lastName, email, phoneNumber, f, zipCode, projectValue, i, lead_id, k, date] = dataRange.getValues()[0];

    // Hashing required data using a map function
    [hashedFirstName, hashedLastName, hashedEmail, hashedPhoneNumber, hashedZipCode] = 
        [firstName, lastName, email, phoneNumber, zipCode].map(val => hashValue(val));

    var timestamp = convertToTimestamp(date); 

    // Simplify the function triggering logic
    var eventHandlers = {
        "facebook": () => sendFacebookEvent(lead_id, date, hashedFirstName, hashedLastName, hashedEmail, hashedPhoneNumber, hashedZipCode),
        "google": () => sendGoogleEvent(lead_id, date),
        // "anotherPlatform": () => sendAnotherPlatformEvent(...args),
    };

    if (eventHandlers[cellValue]) {
        eventHandlers[cellValue]();
    } else {
        Logger.log('No event handler found for platform: ' + cellValue);
    }
}

function sendFacebookEvent(lead_id, date, hashedFirstName, hashedLastName, hashedEmail, hashedPhoneNumber, hashedZipCode) {

  // Logic to send event/data to Facebook API
  var fbApiUrl = 'https://graph.facebook.com/vYOUR_API_VERSION/YOUR_PIXEL_ID/events';
  var payload = {
    "data": [
        {
            "event_name": "Lead",
            "event_time": timestamp,
            "action_source": "system_generated",
            "user_data": {
                "lead_id": lead_id,
                "em": [hashedEmail],
                "fn": [hashedFirstName],
                "ln": [hashedLastName],
                "zp": [hashedZipCode],
                "ph": [hashedPhoneNumber]
            },
            "custom_data": {
                "lead_event_source": "Elmar HVAC CRM",
                "event_source": "crm"
            }
        }
    ]
};
  var params = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
  };
  
  try {
    UrlFetchApp.fetch(fbApiUrl, params);
    Logger.log('Event sent to Facebook successfully!');
  } catch (e) {
    Logger.log('Failed to send event to Facebook: ' + e);
  }
}

function sendGoogleEvent(lead_id, date) {
  var timestamp = convertToTimestamp(date); // Convert lValue to UNIX timestamp
  /* var hashedJValue = hashValue(jValue);  // Hashes jValue */
  
  // Logic to send event/data to Google API (example for Google Analytics Measurement Protocol)
  var googleApiUrl = 'https://www.google-analytics.com/collect';
  var payload = {
    // Your payload data here...
    // v: 1,
    // tid: 'YOUR_TRACKING_ID',
    // cid: '555',
    // t: 'event',
    // ec: 'example',
    // ea: 'action',
  };
  var params = {
    method: 'post',
    payload: payload,
  };
  
  try {
    UrlFetchApp.fetch(googleApiUrl, params);
    Logger.log('Event sent to Google successfully!');
  } catch (e) {
    Logger.log('Failed to send event to Google: ' + e);
  }
}

// Add more API functions per your needs. Use the below format:
/*

function sendYOUR_UNIQUE_APIEvent() {
  // Logic for additional API calls here...
}

*/

}
